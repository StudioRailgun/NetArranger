import java.nio.ByteBuffer;
import java.util.List;
import java.util.concurrent.Semaphore;

public class ByteStreamUtils {
    
    static ByteBuffer integerCompactor;
    static Semaphore bufferLock = new Semaphore(1);
    
    static {
        integerCompactor = ByteBuffer.allocate(8);
    }
    
    public static int popIntFromByteQueue(List<Byte> queue){
        int rVal = -1;
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(4);
        integerCompactor.put(0,queue.remove(0));
        integerCompactor.put(1,queue.remove(0));
        integerCompactor.put(2,queue.remove(0));
        integerCompactor.put(3,queue.remove(0));
        integerCompactor.position(0);
        integerCompactor.limit(4);
        rVal = integerCompactor.getInt();
        bufferLock.release();
        return rVal;
    }
    
    public static float popFloatFromByteQueue(List<Byte> queue){
        float rVal = -1;
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(4);
        integerCompactor.put(0,queue.remove(0));
        integerCompactor.put(1,queue.remove(0));
        integerCompactor.put(2,queue.remove(0));
        integerCompactor.put(3,queue.remove(0));
        integerCompactor.position(0);
        integerCompactor.limit(4);
        rVal = integerCompactor.getFloat();
        bufferLock.release();
        return rVal;
    }
    
    public static long popLongFromByteQueue(List<Byte> queue){
        long rVal = -1;
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(8);
        integerCompactor.put(0,queue.remove(0));
        integerCompactor.put(1,queue.remove(0));
        integerCompactor.put(2,queue.remove(0));
        integerCompactor.put(3,queue.remove(0));
        integerCompactor.put(4,queue.remove(0));
        integerCompactor.put(5,queue.remove(0));
        integerCompactor.put(6,queue.remove(0));
        integerCompactor.put(7,queue.remove(0));
        integerCompactor.position(0);
        integerCompactor.limit(8);
        rVal = integerCompactor.getLong();
        bufferLock.release();
        return rVal;
    }
    
    public static String popStringFromByteQueue(List<Byte> queue){
        int length = popIntFromByteQueue(queue);
        byte[] stringBytes = new byte[length];
        for(int i = 0; i < length; i++){
            stringBytes[i] = queue.remove(0);
        }
        String rVal = new String(stringBytes);
        return rVal;
    }

    public static double popDoubleFromByteQueue(List<Byte> queue){
        double rVal = -1;
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(8);
        integerCompactor.put(0,queue.remove(0));
        integerCompactor.put(1,queue.remove(0));
        integerCompactor.put(2,queue.remove(0));
        integerCompactor.put(3,queue.remove(0));
        integerCompactor.put(4,queue.remove(0));
        integerCompactor.put(5,queue.remove(0));
        integerCompactor.put(6,queue.remove(0));
        integerCompactor.put(7,queue.remove(0));
        integerCompactor.position(0);
        integerCompactor.limit(8);
        rVal = integerCompactor.getDouble();
        bufferLock.release();
        return rVal;
    }
    
    public static byte[] serializeIntToBytes(int i){
        byte[] rVal = new byte[4];
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(4);
        integerCompactor.putInt(i);
        integerCompactor.position(0);
        integerCompactor.limit(4);
        rVal[0] = integerCompactor.get(0);
        rVal[1] = integerCompactor.get(1);
        rVal[2] = integerCompactor.get(2);
        rVal[3] = integerCompactor.get(3);
        bufferLock.release();
        return rVal;
    }
    
    public static byte[] serializeFloatToBytes(float i){
        byte[] rVal = new byte[4];
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(4);
        integerCompactor.putFloat(i);
        integerCompactor.position(0);
        integerCompactor.limit(4);
        rVal[0] = integerCompactor.get(0);
        rVal[1] = integerCompactor.get(1);
        rVal[2] = integerCompactor.get(2);
        rVal[3] = integerCompactor.get(3);
        bufferLock.release();
        return rVal;
    }
    
    public static byte[] serializeLongToBytes(long i){
        byte[] rVal = new byte[8];
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(8);
        integerCompactor.putLong(i);
        integerCompactor.position(0);
        integerCompactor.limit(8);
        rVal[0] = integerCompactor.get(0);
        rVal[1] = integerCompactor.get(1);
        rVal[2] = integerCompactor.get(2);
        rVal[3] = integerCompactor.get(3);
        rVal[4] = integerCompactor.get(4);
        rVal[5] = integerCompactor.get(5);
        rVal[6] = integerCompactor.get(6);
        rVal[7] = integerCompactor.get(7);
        bufferLock.release();
        return rVal;
    }
    
    public static byte[] serializeStringToBytes(String s){
        int length = s.length();
        byte[] rVal = new byte[length + 4]; //the 4 is the header int for the string size
        byte[] serializedInteger = serializeIntToBytes(length);
        rVal[0] = serializedInteger[0];
        rVal[1] = serializedInteger[1];
        rVal[2] = serializedInteger[2];
        rVal[3] = serializedInteger[3];
        byte[] stringBytes = s.getBytes();
        for(int i = 0; i < length; i++){
            rVal[4+i] = stringBytes[i];
        }
        return rVal;
    }

    public static byte[] serializeDoubleToBytes(double i){
        byte[] rVal = new byte[8];
        bufferLock.acquireUninterruptibly();
        integerCompactor.clear();
        integerCompactor.position(0);
        integerCompactor.limit(8);
        integerCompactor.putDouble(i);
        integerCompactor.position(0);
        integerCompactor.limit(8);
        rVal[0] = integerCompactor.get(0);
        rVal[1] = integerCompactor.get(1);
        rVal[2] = integerCompactor.get(2);
        rVal[3] = integerCompactor.get(3);
        rVal[4] = integerCompactor.get(4);
        rVal[5] = integerCompactor.get(5);
        rVal[6] = integerCompactor.get(6);
        rVal[7] = integerCompactor.get(7);
        bufferLock.release();
        return rVal;
    }
    
}