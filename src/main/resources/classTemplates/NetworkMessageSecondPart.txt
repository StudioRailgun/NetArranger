    }
    
    /**
     * The type of this message
     */
    MessageType type;

    /**
     * Tracks whether the message has been serialized to bytes or not
     */
    boolean serialized;

    /**
     * The raw bytes contained in the message
     */
    byte[] rawBytes;

    /**
     * Extra data that can be attached to a message optionally (used for reading in messages, does not affect ougoing messages).
     */
    private List<Object> extraData;

    /**
     * Gets the type of the message
     * @return The type of the message
     */
    public MessageType getType() {
        return type;
    }

    /**
     * Gets the raw bytes of the message
     * @return The raw bytes
     */
    public byte[] getRawBytes() {
        return rawBytes;
    }
    
    /**
     * Parses the byte stream for the next message
     * @param byteBuffer The byte buffer
     * @param pool The message pool
     * @param customParserMap The map of message type/subtype to parser
     * @return The message if one is at the front of the byte stream, null otherwise
     */
    public static NetworkMessage parseBytestreamForMessage(ByteBuffer byteBuffer, MessagePool pool, Map<Short,BiConsumer<NetworkMessage,ByteBuffer>> customParserMap){
        NetworkMessage rVal = null;
        byte firstByte;
        byte secondByte;
        int initialPosition = byteBuffer.position();
        if(byteBuffer.remaining() >= 2){
            firstByte = byteBuffer.get();
            switch(firstByte){
